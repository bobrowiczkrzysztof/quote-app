{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["i","App","props","state","quote","author","previousQuotes","fetch","then","response","json","data","randomNum","Math","floor","random","length","setState","catch","err","this","componentDidMount","some","obj","concat","undefined","id","onClick","getNextQuote","bind","getPreviousQuote","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAEIA,EAAI,EA6EOC,E,kDA3Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,OAAQ,GACRC,eAAgB,IALD,E,qDASnB,WAAqB,IAAD,OAClBC,MACE,yIAECC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QAChD,OAAO,EAAKC,SAAS,CACnBb,MAAOO,EAAKC,GAAL,MACPP,OAAQM,EAAKC,GAAL,YAGXM,OAAM,SAAAC,GAAG,OACR,EAAKF,SAAS,CACZb,MAAO,8CACPC,OAAQ,iB,0BAIhB,WAAgB,IAAD,OACbe,KAAKC,oBAEFD,KAAKjB,MAAMG,eAAegB,MAAK,SAAAC,GAAG,OAAIA,EAAInB,QAAU,EAAKD,MAAMC,UAEhEgB,KAAKH,UAAS,SAAAd,GAAK,MAAK,CACtBG,eAAgBH,EAAMG,eAAekB,OAAO,CAC1CpB,MAAOD,EAAMC,MACbC,OAAQF,EAAME,aAIpBL,EAAIoB,KAAKjB,MAAMG,eAAeU,OAAS,I,8BAEzC,WACY,IAANhB,GAAgD,IAArCoB,KAAKjB,MAAMG,eAAeU,WACrChB,OACmCyB,IAAjCL,KAAKjB,MAAMG,eAAeN,IAC5BoB,KAAKH,UAAS,SAAAd,GAAK,MAAK,CACtBC,MAAOD,EAAMG,eAAeN,GAAGI,MAC/BC,OAAQF,EAAMG,eAAeN,GAAGK,c,oBAKxC,WACE,OACE,qBAAKqB,GAAG,YAAR,SACE,sBAAKA,GAAG,mBAAR,UACE,mBAAGA,GAAG,OAAN,SAAcN,KAAKjB,MAAMC,QACzB,oBAAGsB,GAAG,SAAN,cAAiBN,KAAKjB,MAAME,UAC5B,gCACE,wBAAQqB,GAAG,aAAaC,QAASP,KAAKQ,aAAaC,KAAKT,MAAxD,wBAGA,wBACEM,GAAG,iBACHC,QAASP,KAAKU,iBAAiBD,KAAKT,MAFtC,yC,GAhEMW,IAAMC,WCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9dd04cf8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nlet i = 0;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: '',\n      author: '',\n      previousQuotes: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\n      'https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json'\n    )\n      .then(response => response.json())\n      .then(data => {\n        let randomNum = Math.floor(Math.random() * data.length);\n        return this.setState({\n          quote: data[randomNum]['quote'],\n          author: data[randomNum]['author'],\n        });\n      })\n      .catch(err =>\n        this.setState({\n          quote: 'Error: something is wrong. Please try again',\n          author: 'unknown',\n        })\n      );\n  }\n  getNextQuote() {\n    this.componentDidMount();\n    if (\n      !this.state.previousQuotes.some(obj => obj.quote === this.state.quote)\n    ) {\n      this.setState(state => ({\n        previousQuotes: state.previousQuotes.concat({\n          quote: state.quote,\n          author: state.author,\n        }),\n      }));\n    }\n    i = this.state.previousQuotes.length + 1;\n  }\n  getPreviousQuote() {\n    if (i !== 0 && this.state.previousQuotes.length !== 0) {\n      --i;\n      if (this.state.previousQuotes[i] !== undefined) {\n        this.setState(state => ({\n          quote: state.previousQuotes[i].quote,\n          author: state.previousQuotes[i].author,\n        }));\n      }\n    }\n  }\n  render() {\n    return (\n      <div id=\"container\">\n        <div id=\"quotes-container\">\n          <q id=\"text\">{this.state.quote}</q>\n          <p id=\"author\">-{this.state.author}</p>\n          <div>\n            <button id=\"next-quote\" onClick={this.getNextQuote.bind(this)}>\n              Next quote\n            </button>\n            <button\n              id=\"previous-quote\"\n              onClick={this.getPreviousQuote.bind(this)}\n            >\n              Previous quotes\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}